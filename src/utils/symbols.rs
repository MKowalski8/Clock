use embassy_stm32::time::{hz, Hertz};


pub const BLANK: [u8; 8] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];

#[allow(dead_code)]
pub const DOT: [u8; 8] = [0x00,0x00,0x00,0x00,0x00,0x70,0x70,0x70];
pub const EXCLAMETION_MARK: [u8; 8] = [0x18,0x18,0x18,0x18,0x00,0x18,0x18,0x00];

pub const DIGITS: [[u8; 8]; 10] = [
    [0x78, 0xcc, 0x9c, 0xb4, 0xe4, 0xcc, 0x78, 0x00],  // (zero)
    [0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00],  // (one)
    [0x78, 0xcc, 0x0c, 0x38, 0x60, 0xc4, 0xfc, 0x00],  // (two)
    [0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00],  // (three)
    [0x1c, 0x3c, 0x6c, 0xcc, 0xfc, 0x0c, 0x1c, 0x00],  // (four)
    [0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00],  // (five)
    [0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00],  // (six)
    [0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00],  // (seven)
    [0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00],  // (eight)
    [0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00]   // (nine)
];

#[allow(dead_code)]
pub enum Letters {
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
}
impl Letters {
    pub fn bytes(&self) -> [u8; 8] {
        match self {
            Letters::A => [0x18, 0x3c, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x00],
            Letters::B => [0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00],
            Letters::C => [0x1e, 0x33, 0x60, 0x60, 0x60, 0x33, 0x1e, 0x00],
            Letters::D => [0x7c, 0x36, 0x33, 0x33, 0x33, 0x36, 0x7c, 0x00],
            Letters::E => [0x7f, 0x31, 0x34, 0x3c, 0x34, 0x31, 0x7f, 0x00],
            Letters::F => [0x7f, 0x31, 0x34, 0x3c, 0x34, 0x30, 0x78, 0x00],
            Letters::G => [0x1e, 0x33, 0x60, 0x60, 0x67, 0x33, 0x1f, 0x00],
            Letters::H => [0x66, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00],
            Letters::I => [0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00],
            Letters::J => [0x0f, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00],
            Letters::K => [0x73, 0x33, 0x36, 0x3c, 0x36, 0x33, 0x73, 0x00],
            Letters::L => [0x78, 0x30, 0x30, 0x30, 0x31, 0x33, 0x7f, 0x00],
            Letters::M => [0x63, 0x77, 0x7f, 0x7f, 0x6b, 0x63, 0x63, 0x00],
            Letters::N => [0x63, 0x73, 0x7b, 0x6f, 0x67, 0x63, 0x63, 0x00],
            Letters::O => [0x1c, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1c, 0x00],
            Letters::P => [0x7e, 0x33, 0x33, 0x3e, 0x30, 0x30, 0x78, 0x00],
            Letters::Q => [0x3c, 0x66, 0x66, 0x66, 0x6e, 0x3c, 0x0e, 0x00],
            Letters::R => [0x7e, 0x33, 0x33, 0x3e, 0x36, 0x33, 0x73, 0x00],
            Letters::S => [0x3c, 0x66, 0x70, 0x38, 0x0e, 0x66, 0x3c, 0x00],
            Letters::T => [0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00],
            Letters::U => [0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00],
            Letters::V => [0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00],
            Letters::W => [0x63, 0x63, 0x63, 0x6b, 0x7f, 0x77, 0x63, 0x00],
            Letters::X => [0x63, 0x63, 0x36, 0x1c, 0x1c, 0x36, 0x63, 0x00],
            Letters::Y => [0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x00],
            Letters::Z => [0x7f, 0x63, 0x46, 0x0c, 0x19, 0x33, 0x7f, 0x00],
            
        }
    }
}

pub const FREQUENCIES: [(&str, Hertz); 25] = [
    ("C3", hz(131)),
    ("C#3", hz(139)),
    ("D3", hz(147)),
    ("D#3", hz(156)),
    ("E3", hz(165)),
    ("F3", hz(175)),
    ("F#3", hz(185)),
    ("G3", hz(196)),
    ("G#3", hz(208)),
    ("A3", hz(220)),
    ("A#3", hz(233)),
    ("B3", hz(247)),
    ("C4", hz(262)),
    ("C#4", hz(277)),
    ("D4", hz(294)),
    ("D#4", hz(311)),
    ("E4", hz(330)),
    ("F4", hz(349)),
    ("F#4", hz(370)),
    ("G4", hz(392)),
    ("G#4", hz(415)),
    ("A4", hz(440)),
    ("A#4", hz(466)),
    ("B4", hz(494)),
    ("C5", hz(523)),
];

// #[derive(defmt::Format)]
//  enum ButtonEvent {
//     SingleClick,
//     DoubleClick,
//     Hold,
// }